#include "Header.hpp"
/*****************************************************************************
Произведение матриц

**data1 - первый множитель
**data2 - второй множитель
size1 - кол-во строк в первой матрице
size2 - колво столбцов в первой матрице и кол-во строк во второй
size3 - кол-во столбцов во второй матрице
*****************************************************************************/
double **mult(double **data1, double **data2, const int size1, const int size2, const int size3){
	double ** result;

	result = new double *[size1];//результат произведения

	for(int i = 0; i < size1; i++)
		result[i] = new double[size3];


		// используется параллельная обработка элементов массива
		// Однородные вычислительные структуры или среды (ОВС), как правило, 
		// относятся к классу  ОКМД (согласно классификации Флинна) 
		// и представляют собой регулярную структуру из однотипных процессорных элементов (ПЭ).
		// Каждый ПЭ, в зависимости от типа ОВС, может как обладать алгоритмически полным набором 
		// операций, так и реализовывать один вид операций, жестко заданный в структуре микросхемы 
		// на этапе проектирования, а также выполнять операции обмена или взаимодействия с другими ПЭ.
		// OpenMP поддерживает директивы parallel, for, parallel for, section, sections, single, master, critical, flush, ordered и atomic, 
		// которые определяют или механизмы разделения работы или конструкции синхронизации. 
		// Общие переменные доступны всем потокам из группы, поэтому изменения таких переменных в одном потоке видимы другим потокам 
		// в параллельном регионе. Что касается частных переменных, то каждый поток из группы располагает их отдельными экземплярами, 
		// поэтому изменения таких переменных в одном потоке никак не сказываются на их экземплярах, 
		// принадлежащих другим потокам.
		// частными являются индексы параллельных циклов for.

#pragma omp parallel for
	for(int str = 0; str < size1; str++)//строки первой матрицы
	{
#pragma omp parallel for
		for(int col = 0; col < size3; col++)//столбцы второй матрицы
		{
			result[str][col] = 0;
			for(int i = 0; i < size2; i++)
				result[str][col] += data1[str][i]*data2[i][col];
		}
	}
	return result;
}

			
