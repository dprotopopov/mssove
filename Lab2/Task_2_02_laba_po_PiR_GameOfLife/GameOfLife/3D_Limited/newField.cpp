#include "Header.hpp"
/***************************************************************
Обновление поля
field[WIDTH][HEIGHT][DEPTH] - текущее поле.

Возвращает true, если поле изменило своё состояние, иначе false
***************************************************************/
bool newField(bool field[WIDTH][HEIGHT][DEPTH])
{
	int countNeighbors = 0;					//Количество живых соседей
	bool notStatState = false;				//Возвращаемое значение
	bool newField[WIDTH][HEIGHT][DEPTH];
	

		// используется параллельная обработка элементов массива
		// Однородные вычислительные структуры или среды (ОВС), как правило, 
		// относятся к классу  ОКМД (согласно классификации Флинна) 
		// и представляют собой регулярную структуру из однотипных процессорных элементов (ПЭ).
		// Каждый ПЭ, в зависимости от типа ОВС, может как обладать алгоритмически полным набором 
		// операций, так и реализовывать один вид операций, жестко заданный в структуре микросхемы 
		// на этапе проектирования, а также выполнять операции обмена или взаимодействия с другими ПЭ.
		// OpenMP поддерживает директивы parallel, for, parallel for, section, sections, single, master, critical, flush, ordered и atomic, 
		// которые определяют или механизмы разделения работы или конструкции синхронизации. 
		// Общие переменные доступны всем потокам из группы, поэтому изменения таких переменных в одном потоке видимы другим потокам 
		// в параллельном регионе. Что касается частных переменных, то каждый поток из группы располагает их отдельными экземплярами, 
		// поэтому изменения таких переменных в одном потоке никак не сказываются на их экземплярах, 
		// принадлежащих другим потокам.
		// частными являются индексы параллельных циклов for.

#pragma omp parallel for
	for(int h = 0; h < HEIGHT; h++)
#pragma omp parallel for
		for(int w = 0; w < WIDTH; w++)
#pragma omp parallel for
			for(int d = 0; d < DEPTH; d++)
			{
				countNeighbors = 0;
				if(w > 0)
					countNeighbors += field[w-1][h][d];
				if(w < WIDTH-1)
					countNeighbors += field[w+1][h][d];
				if(h > 0)
					countNeighbors += field[w][h-1][d];
				if(h < HEIGHT-1)
					countNeighbors += field[w][h+1][d];
				if(d > 0)
					countNeighbors += field[w][h][d-1];
				if(d < DEPTH-1)
					countNeighbors += field[w][h][d+1];
				newField[w][h][d] = newState(field[w][h][d], countNeighbors);
				if(newField[w][h][d] != field[w][h][d])
					notStatState = true;
			}


		// используется параллельная обработка элементов массива
		// Однородные вычислительные структуры или среды (ОВС), как правило, 
		// относятся к классу  ОКМД (согласно классификации Флинна) 
		// и представляют собой регулярную структуру из однотипных процессорных элементов (ПЭ).
		// Каждый ПЭ, в зависимости от типа ОВС, может как обладать алгоритмически полным набором 
		// операций, так и реализовывать один вид операций, жестко заданный в структуре микросхемы 
		// на этапе проектирования, а также выполнять операции обмена или взаимодействия с другими ПЭ.
		// OpenMP поддерживает директивы parallel, for, parallel for, section, sections, single, master, critical, flush, ordered и atomic, 
		// которые определяют или механизмы разделения работы или конструкции синхронизации. 
		// Общие переменные доступны всем потокам из группы, поэтому изменения таких переменных в одном потоке видимы другим потокам 
		// в параллельном регионе. Что касается частных переменных, то каждый поток из группы располагает их отдельными экземплярами, 
		// поэтому изменения таких переменных в одном потоке никак не сказываются на их экземплярах, 
		// принадлежащих другим потокам.
		// частными являются индексы параллельных циклов for.

#pragma omp parallel for
	for(int h = 0; h < HEIGHT; h++)
#pragma omp parallel for
		for(int w = 0; w < WIDTH; w++)
#pragma omp parallel for
			for(int d = 0; d < DEPTH; d++)
					field[w][h][d] = newField[w][h][d];
		return notStatState;
}