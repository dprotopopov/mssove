#include "Header.hpp"
/***********************************************************************
Поиск максимального и минимального элемента

**data - матрица
height - высота матрицы (кол-во строк)
width - ширина матрицы (кол-во столбцов)
&min - минимальный  элемент
&max - максимальный элемент
***********************************************************************/



void findMinMax(double **data, int height, int width, double &min, double &max){

	min = max = data[0][0];

		// используется параллельная обработка элементов массива
		// Однородные вычислительные структуры или среды (ОВС), как правило, 
		// относятся к классу  ОКМД (согласно классификации Флинна) 
		// и представляют собой регулярную структуру из однотипных процессорных элементов (ПЭ).
		// Каждый ПЭ, в зависимости от типа ОВС, может как обладать алгоритмически полным набором 
		// операций, так и реализовывать один вид операций, жестко заданный в структуре микросхемы 
		// на этапе проектирования, а также выполнять операции обмена или взаимодействия с другими ПЭ.
		// OpenMP поддерживает директивы parallel, for, parallel for, section, sections, single, master, critical, flush, ordered и atomic, 
		// которые определяют или механизмы разделения работы или конструкции синхронизации. 
		// Общие переменные доступны всем потокам из группы, поэтому изменения таких переменных в одном потоке видимы другим потокам 
		// в параллельном регионе. Что касается частных переменных, то каждый поток из группы располагает их отдельными экземплярами, 
		// поэтому изменения таких переменных в одном потоке никак не сказываются на их экземплярах, 
		// принадлежащих другим потокам.
		// частными являются индексы параллельных циклов for.

	double *temp = new double[height+1]; //+1 для нулевого размера

	//Поиск максимального элемента по строкам
#pragma omp parallel for
	for(int str = 0; str < height; str++) {
		temp[str]=data[str][0];
		for(int col = 0; col < width; col++)
			if(temp[str] < data[str][col])
				temp[str] = data[str][col];
	}

	//Поиск максимального элемента среди максимальных элементов строк
	//непараллельные вычисления
	for(int str = 0; str < height; str++) {
		if(max < temp[str])
			max = temp[str];
	}

	//Поиск минимального элемента по столбцам
#pragma omp parallel for
	for(int str = 0; str < height; str++) {
		temp[str]=data[str][0];
		for(int col = 0; col < width; col++)
			if(temp[str] > data[str][col])
				temp[str] = data[str][col];
	}

	//Поиск минимального элемента среди минимальных элементов строк
	//непараллельные вычисления
	for(int str = 0; str < height; str++) {
		if(min > temp[str])
			min = temp[str];
	}

	delete temp;
}