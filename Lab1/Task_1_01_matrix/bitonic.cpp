#include "Header.hpp"

/*
Битоническая сортировка (bitonic sort)

В основе этой сортировки лежит операция Bn(полуочиститель, half - cleaner) над массивом, параллельно
упорядочивающая элементы пар xi и xi + n / 2.На рис. 1 полуочиститель может упорядочивать элементы пар как по
возрастанию, так и по убыванию.Сортировка основана на понятии битонической последовательности и
утверждении : если набор полуочистителей правильно сортирует произвольную последовательность нулей и
единиц, то он корректно сортирует произвольную последовательность.
Последовательность a0, a1, …, an - 1 называется битонической, если она или состоит из двух монотонных
частей(т.е.либо сначала возрастает, а потом убывает, либо наоборот), или получена путем циклического
сдвига из такой последовательности.Так, последовательность 5, 7, 6, 4, 2, 1, 3 битоническая, поскольку
получена из 1, 3, 5, 7, 6, 4, 2 путем циклического сдвига влево на два элемента.
Доказано, что если применить полуочиститель Bn к битонической последовательности a0, a1, …, an - 1,
то получившаяся последовательность обладает следующими свойствами :
• обе ее половины также будут битоническими.
• любой элемент первой половины будет не больше любого элемента второй половины.
• хотя бы одна из половин является монотонной.
Применив к битонической последовательности a0, a1, …, an - 1 полуочиститель Bn, получим две
последовательности длиной n / 2, каждая из которых будет битонической, а каждый элемент первой не превысит
каждый элемент второй.Далее применим к каждой из получившихся половин полуочиститель Bn / 2.Получим
уже четыре битонические последовательности длины n / 4.Применим к каждой из них полуочиститель Bn / 2 и
продолжим этот процесс до тех пор, пока не придем к n / 2 последовательностей из двух элементов.Применив к
каждой из них полуочиститель B2, отсортируем эти последовательности.Поскольку все последовательности
уже упорядочены, то, объединив их, получим отсортированную последовательность.
Итак, последовательное применение полуочистителей Bn, Bn / 2, …, B2 сортирует произвольную
битоническую последовательность.Эту операцию называют битоническим слиянием и обозначают Mn.
Например, к последовательности из 8 элементов a 0, a1, …, a7 применим полуочиститель B2, чтобы на
соседних парах порядок сортировки был противоположен.На рис. 2 видно, что первые четыре элемента
получившейся последовательности образуют битоническую последовательность.Аналогично последние
четыре элемента также образуют битоническую последовательность.Поэтому каждую из этих половин можно
отсортировать битоническим слиянием, однако проведем слияние таким образом, чтобы направление
сортировки в половинах было противоположным.В результате обе половины образуют вместе битоническую
Битоническая сортировка последовательности из n элементов разбивается пополам и каждая из
половин сортируется в своем направлении.После этого полученная битоническая последовательность
сортируется битоническим слиянием.
*/

void device_exchange(double *x, double *y, int count);
void device_copy(double *x, double *y, int count);
int device_comparer(double *x, double *y);
void global_bitonic_worker(double * data, int n, int i, int j, int blocks_threads, int loops, int direction);
void global_bitonic_merger(double * data, double * data2, int * sizes, int n, int direction);

void host_bitonic_sort(double *data, int n, int direction)
{
	// data - массив данных
	// n - количество элементов в исходном массиве для сортировки
	// direction - способ сортировки 
	// -1 означает сортировку по убыванию, 
	//  1 означает сортировку по возрастанию

	double *device_data;
	double *device_data2;
	int *device_size;

	// Всего надо выполнить k*(k-1)/2*2^(k-1) операций сравнения, где k = log2 n
	// За одну итерацию запуска процессов будет выполнено n/2 = 2^(k-1) операций

	// Шаг первый - копируем исходный массив в память GPU 

	device_data = new double[n];
	memcpy(device_data, data, n*sizeof(double));

	// Число n представимо в виде суммы степеней двойки,
	// Поэтому, разбиваем исходные данные на подмассивы с длинами равными слагаемым этой суммы
	// и сортируем каждый подмассив битоническим алгоритмом 
	// В разультате получим равное числу слагаеммых отсортированных массивов длинами равным степеням двойки

	for(int k=1; (1<<k) <= n ; k++) {

		if ( n & (1<<k) ) {

			for(int i = 0; i < k ; i++ ) {
				for( int j = i; j >= 0 ; j-- ) 	{ 

					// Определим оптимальное разбиения на процессы, нити и циклы 
					// одна нить в просессе будет будет выполнять цикл с указанным количеством итераций

					int blocks = 1 << (int)k/3;
					int threads = 1 << (int)k/3;
					int loops = ((1 << (k - 1)) + (blocks*threads - 1))/(blocks*threads);

					assert((1<<(k - 1)) == blocks*threads*loops);

					// одинаковый шаг в каждом блоке гарантирует отсутствие коллизий (одновременного доступа к одним и тем же данным)
					global_bitonic_worker (&device_data[n&((1<<k)-1)], n&(1<<k), i, j, blocks*threads, loops, direction);
				}
			}
		}
	}

	// Теперь надо произвести слияние уже отсортированных массивов
	// Для этого выделяет массив такого же размера как и первый
	// и массив размеров очередей

	device_data2 = new double[n];
	device_size = new int[sizeof(int)*8];

	global_bitonic_merger (device_data, device_data2, device_size, n , direction);

	// Возвращаем результаты в исходный массив
	memcpy(data, device_data2, n*sizeof(double));

	// Освобождаем память на устройстве
	delete device_data;
	delete device_data2;
	delete device_size;	
}


void global_bitonic_merger(
	double * data, 
	double * data2, 
	int * size,
	int n,
	int direction)
{
	for(int k=0; k<8*sizeof(int) ; k++ ) size[k] = n & (1<<k);

	int total = n;

	while(total > 0) {
		int k = 8*sizeof(int);	while( (k-->0) && (size[k] == 0) ) ;
		for (int i=k; i-- ; ) {
			if (size[i] > 0 &&	
				direction*device_comparer(
					&data[(n&((1<<k)-1))+size[k]-1],
					&data[(n&((1<<i)-1))+size[i]-1]) < 0)
			{
				k = i;
			}
		}
		total--;
		size[k]--;
		device_copy(&data2[total],&data[(n&((1<<k)-1))+size[k]],1);
	}
}


void global_bitonic_worker(
	double * data, 
	int n, int i, int j,
	int blocks_threads, int loops,
	int direction)
{
	for(int block = 0; block<blocks_threads; block++){
	int step = 1<<j;
	for(int y=0; y<loops; y++) {
		// Получаем идентификатор шага цикла
		int id = block*loops+y;
		int offset = ((id>>j)<<(j+1))+(id&((1<<j)-1));
		int parity = (id >> i);
		while(parity>1) parity = (parity>>1) ^ (parity&1);
		parity = 1-(parity<<1); // теперь переменная parity может иметь только 2 значения 1 и -1

		if ((offset+step) < n) {
			int value = parity*direction*device_comparer(&data[offset],&data[offset+step]);
			if (value > 0) device_exchange(&data[offset],&data[offset+step],1);
		}
	}
	}
}

// Перестановка двух блоков в памяти устройства

void device_exchange(double *x, double *y, int count)
{
	for(int i = 0; i < count ; i++ ) {
		double ch = x[i] ; x[i] = y[i] ; y[i] = ch;
	}
}

// Копирование одного участка памяти в другой

void device_copy(double *x, double *y, int count)
{
	for(int i = 0; i < count ; i++ ) {
		x[i] = y[i] ;
	}
}

// Функция сравнения данных xранимых в памяти как целых чисел типа double
// comparison function which returns ​a negative integer value if the first argument is less than the second, 
// a positive integer value if the first argument is greater than the second and zero if the arguments are equal.

int device_comparer(double *x, double *y)
{
	if ((*x)<(*y)) return -1;
	else if ((*x)>(*y)) return 1;
	else return 0;
}

